# DeepIlluminance: Contextual Illuminance Estimation via Deep Neural Networks

We release the Caffe code of the [DeepIlluminance](https://arxiv.org/abs/1905.04791).


### Reference

If you find our paper and repo useful, please cite our paper. Thanks!

```
@article{Zhang2019illuminance,
    title={DeepIlluminance: Contextual Illuminance Estimation via Deep Neural Networks},
    author={Zhang, Jun and Zheng, Tong and Zhang, Shengping and Wang, Meng},
    journal={arXiv preprint arXiv:1905.04791},
    year={2019}
}  
```

### Prerequisites

The code is built with following libraries:

- [PyTorch](https://caffe.berkeleyvision.org/)
- [Python 2.7](Anaconda installation)
- [Matlab 2016b](https://www.mathworks.com/products/matlab.html)


### Data Pre-processing

- We have trained on ColorChecker and NUS-8 datasets. Please refer to [ColorChecker](https://www2.cs.sfu.ca/~colour/data/shi_gehler/) and [NUS-8] (http://cvil.eecs.yorku.ca/projects/public_html/illuminant/illuminant.html) datasets for the detailed guide of data generation.
Basically, the processing of image data can be summarized into 3 steps:
- Sample image patches with both bright and dark pixels (refer to [search_patch_neighbor.py](./search_patch_neighbor.py)) 
- View the gamma correction patches (refer to [gamma.m](./gamma.m))
- Generate LMDB files (refer to [create_data_lmdb.sh](./create_data_lmdb.sh) and [create_lmdb.py](./create_lmdb.py))


### ColorChecker Pretrained Models

Here we provide the pretrained models on ColorChecker for fine-tuning at BaiduYun: https://pan.baidu.com/s/1NfvBGdxmj3oA503UJK9pbg#list/path=%2Fpretrained_model and GoogleDrive: 



### Testing 

For example, to test the downloaded pretrained models on ColorChecker, you can run `context_network/trained_model/test.py` to get the output of the contextual network. Then, run 'refinement_network/trained_model/test.py to get the final estimation result'.


### Training 

We provided codes to train DeepIlluminance network with this repo:
  For the contextual network: refer to context_network/patch_model.py 
  For the refinement network: refer to refinement_network/patch_model.py
